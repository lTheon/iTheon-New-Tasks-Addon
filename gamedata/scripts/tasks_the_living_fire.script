local nta_utils = new_tasks_addon_tasks_utils
local configs = a_the_living_fire_configs

local state = {
    prometheus_id = nil,
    garbage_mutant_id = nil,
}
function save_state(mdata)
	-- mdata.the_living_fire_task_data = state
end

function load_state(mdata)
	-- if mdata.the_living_fire_task_data then
	-- 	state = mdata.the_living_fire_task_data
	-- end
end

task_status_functor.the_living_fire_task_status_functor = function(tsk,task_id)
	if not (db.actor and tsk) then return end
	local stage = tsk.stage

	if stage == 0 then
        if db.actor:has_info('baraholka_trader_the_living_fire_1_passed') then
            tsk.stage = 1
        end
    end

    if stage == 1 then
        if nta_utils.actor_in_range(configs.garbage_prometheus_location, nil, configs.garbage_prometheus_spawn_activation_distance) then
            state.prometheus_id = nta_utils.spawn_helper(configs.garbage_prometheus_location)
            db.actor:give_info_portion("the_living_fire_prometheus_garbage_spawned")
            tsk.stage = 2
        end
    end

    if stage == 2 then
        
    end
end

function spawn_small_giants()
    for _, spawn_config in pairs(the_living_fire_configs.small_giants_spots) do
        table.insert(state.small_giants_ids, nta_utils.spawn_helper(spawn_config, "gigant_weak"))
    end
end

function spawn_big_giant()
    state.big_giant_id = nta_utils.spawn_helper(the_living_fire_configs.big_giant_spot)
end

task_functor.the_living_fire_task_target_functor = function(task_id,field,p,tsk)
	if not (db.actor and tsk) then return nil end

    if tsk.stage == 0 then
        return id_by_sid('baraholka_trader')
    end
    -- stage 1 - no pointer - enough clues given

    if tsk.stage == 2 then
        
    end

    if tsk.stage == 3 then
        return tsk.task_giver_id
    end
    return
end

xr_effects.the_living_fire_cleanup = function()
    state = {}
end

function on_game_start()
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end